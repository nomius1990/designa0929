define(["jquery","LazyLoad","popup","magestore/flexslider","carousel","Magefan_Blog/js/masonry.pkgd.min","bridget","mage/mage","ajaxScroll","touchSwipe","mage/storage"],function(e,t,o,n,i,a,s,r,l,c,d){"use strict";var y=function(e){{if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t}}(e),k=(f(t),f(o),f(n),f(i),f(a)),b=f(s),C=(f(r),f(l),f(c),f(d));function f(e){return e&&e.__esModule?e:{default:e}}y(function(){var i=0,s={},a="iframe",o="popup",e="loose",r="html5",t=window.lazyLoad,n=window.validate,l=window.ajaxscroll,c=window.pwa,d=window.flexSlider||[],f=function(e){if(!e.length)return!1;var t=window.quickView.baseUrl+"weltpixel_quickview/index/updatecart",o=parseInt(window.quickView.showMiniCart);window.quickView.showMiniCartFlag=!1,y.magnificPopup.open({items:{src:e},type:"iframe",closeOnBgClick:!1,preloader:!0,tLoading:"",callbacks:{open:function(){y(".mfp-preloader").css("display","block")},beforeClose:function(){y('[data-block="minicart"]').trigger("contentLoading"),y.ajax({url:t,method:"POST"})},close:function(){y(".mfp-preloader").hide()},afterClose:function(){window.quickView.showMiniCartFlag&&o&&(y("html, body").animate({scrollTop:0},"slow"),setTimeout(function(){y(".block-minicart").is(":visible")||y(".action.showcart").trigger("click")},1e3))}}})};function u(e){return(e=e||window.event).preventDefault?(e.preventDefault(),e.stopPropagation()):(e.cancelBubble=!0,e.returnValue=!1),!1}window.innerWidth<=640&&(document.addEventListener&&document.addEventListener("DOMMouseScroll",u,!1),window.onmousewheel=document.onmousewheel=u),y(".lazy").lazyload({offset:t.offset,offsetVertical:t.offsetVertical,offsetHorizontal:t.offsetHorizontal,offsetTop:t.offsetTop,offsetBottom:t.offsetBottom,offsetLeft:t.offsetLeft,offsetRight:t.offsetRight,throttle:t.throttle,effec:t.effect,debounce:t.debounce,unload:t.unload,delay:t.delay,callback:function(e,t){var o=y(e).parent();y(e).removeClass("lazy").addClass("loaded"),o.hasClass("poster")&&y(e).next().addClass("loaded")}}),y(".lazy-bg").lazyload({offset:t.offset,offsetVertical:t.offsetVertical,offsetHorizontal:t.offsetHorizontal,offsetTop:t.offsetTop,offsetBottom:t.offsetBottom,offsetLeft:t.offsetLeft,offsetRight:t.offsetRight,throttle:t.throttle,effec:t.effect,debounce:t.debounce,unload:t.unload,delay:0,callback:function(e,t){y(e).removeClass("lazy-bg").addClass("loaded")}}),(0,b.default)("masonry",k.default,y),y(".waterfall").masonry({itemSelector:".grid",gutter:30,percentPosition:!0}),y(".owl-blog").owlCarousel({items:4,lazyLoad:!0,loop:!0,nav:!0,margin:30,dots:!1,autoplay:!0,autoplayTimeout:7e3,navText:['<svg class="icon" aria-hidden="true"><use xlink:href="#icon-left"></use></svg>','<svg class="icon" aria-hidden="true"><use xlink:href="#icon-right"></use></svg>'],responsive:{0:{items:1,nav:!1,dots:!1},640:{items:2,nav:!1,dots:!1},768:{items:2,dots:!0},1200:{items:3,dots:!0},1440:{items:4,dots:!1}}}),y(".owl-comparison").owlCarousel({items:4,lazyLoad:!0,loop:!1,nav:!0,dots:!1,autoplay:!1,navText:['<svg class="icon" aria-hidden="true"><use xlink:href="#icon-left-square"></use></svg>','<svg class="icon" aria-hidden="true"><use xlink:href="#icon-right-square"></use></svg>'],responsive:{0:{items:1},460:{items:2},900:{items:3},1200:{items:4}}}),y(".owl-review").owlCarousel({items:3,lazyLoad:!0,loop:!1,nav:!0,dots:!1,autoplay:!0,autoplayTimeout:4e3,navText:['<svg class="icon" aria-hidden="true"><use xlink:href="#icon-left-square"></use></svg>','<svg class="icon" aria-hidden="true"><use xlink:href="#icon-right-square"></use></svg>'],responsive:{0:{items:1},460:{items:2},900:{items:3},1200:{items:3}}}),y(".owl-theme").owlCarousel({items:4,lazyLoad:!0,loop:!1,nav:!0,dots:!0,autoplay:!0,autoplayTimeout:5e3,navText:['<svg class="icon" aria-hidden="true"><use xlink:href="#icon-left-square"></use></svg>','<svg class="icon" aria-hidden="true"><use xlink:href="#icon-right-square"></use></svg>'],responsive:{0:{items:1},460:{items:2},900:{items:3},1200:{items:4}}}),y(".print").on("click",function(e){y(".checkout-detail").printArea({mode:"iframe",popClose:!0})}),y(".stamp").on("click",function(e){y(".table-wrapper").printArea({mode:"iframe",popClose:!0})}),y(".show-detail").on("click",function(e){var t=y(e.currentTarget);t.hasClass("active")?(t.removeClass("active"),y(".checkout-body").slideDown()):(t.addClass("active"),y(".checkout-body").slideUp())}),y("body").on("click",".weltpixel-quickview",function(e){var t=y(e.currentTarget).attr("data-quickview-url");t.length&&f(t)}),void 0!==n&&(n.enabled?n.ignore=":hidden:not("+n.ignore.ignore+")":n.ignore=n.ignore?":hidden:not("+n.ignore+")":":hidden",y(".create-individual").mage("validation",{ignore:n.ignore}).find("input:text").attr("autocomplete","off"),y(".create-enterprise").mage("validation",{ignore:n.ignore}).find("input:text").attr("autocomplete","off")),y(".tab-link").on("click",function(e){var t=y(e.currentTarget),o=t.data("toggle");t.hasClass("active")||(t.addClass("active").siblings().removeClass("active"),y("."+o).addClass("active").siblings().removeClass("active"),y(".create-"+o).validation("clearError"))}),y(".close-banner").on("click",function(e){y(".banner").slideUp("slow"),y(".page-wrapper").removeClass("fixed")}),y(".cos.item").swipe({swipeLeft:function(e,t,o){y(e.currentTarget).addClass("swipe")},swipeRight:function(e,t,o){y(e.currentTarget).removeClass("swipe")},swipeUp:function(e,t,o){var n=document.documentElement.scrollTop||document.body.scrollTop;y("html, body").animate({scrollTop:n+2*o},500)},swipeDown:function(e,t,o){var n=document.documentElement.scrollTop||document.body.scrollTop;y("html, body").animate({scrollTop:n-2*o},500)},threshold:0,fingers:"all"}),0<d.length&&y.each(d,function(e,t){var o=t.htmlId,n=t.flex_one,i=t.flex_two,a=t.flex_three;switch(t.style){case n:y("."+o).flexslider({animation:t.animation,slideshowSpeed:t.speed,prevText:'<svg class="icon" aria-hidden="true"><use xlink:href="#icon-left"></use></svg>',nextText:'<svg class="icon" aria-hidden="true"><use xlink:href="#icon-right"></use></svg>'});break;case i:y("."+o).flexslider({animation:t.animation,controlNav:"thumbnails",slideshowSpeed:t.speed,prevText:'<svg class="icon" aria-hidden="true"><use xlink:href="#icon-left"></use></svg>',nextText:'<svg class="icon" aria-hidden="true"><use xlink:href="#icon-right"></use></svg>'});break;case a:y("#"+o+"-carousel").flexslider({animation:"slide",controlNav:!1,animationLoop:!0,slideshow:!0,itemWidth:210,itemMargin:5,asNavFor:"#"+o}),y("#"+o).flexslider({animation:t.animation,controlNav:!1,animationLoop:!0,slideshow:!0,sync:"#"+o+"-carousel",slideshowSpeed:t.speed});break;default:y("."+o).flexslider({animation:"slide",animationLoop:!0,itemWidth:400,slideshow:!0,itemMargin:5,minItems:2,maxItems:4})}}),y(".blog-flexslider").flexslider({animation:"slide",itemWidth:460,itemMargin:65,slideshowSpeed:5e3,move:1,slideshow:!1,animationLoop:!0,mousewheel:!0,controlNav:!1,directionNav:!1});var p=function(){var e=window.innerWidth,t=document.documentElement.scrollTop||document.body.scrollTop,o=Math.abs(y(".magestore-bannerslider").height()-y(".inner-wrapper").height()),n=y(".page-main").offset().top+y(".page-main").height();o<=t?(y(".page-header").addClass("active"),y(".website").fadeIn("slow")):(y(".page-header").removeClass("active"),y(".website").fadeOut("slow").removeClass("open")),n<=t&&767<e?(y(".quick-add").addClass("active"),y(".action.pop").addClass("show")):(y(".quick-add").removeClass("active"),y(".action.pop").removeClass("show"))};p(),y(window).on("scroll resize",function(){p()}),y(".cart-add").on("click",function(e){var t=y(e.currentTarget).next(),o=parseInt(t.val())+1,n={item_id:t.attr("id"),item_qty:o};y(e.currentTarget).hasClass("cart")?h(n,t,o):t.val(o)}),y(".cart-minus").on("click",function(e){var t=y(e.currentTarget).prev(),o=parseInt(t.val())-1,n={item_id:t.attr("id"),item_qty:o};y(e.currentTarget).hasClass("cart")?h(n,t,o):0<o&&t.val(o)});var h=function(e,t,o){e=y.extend(e,{form_key:y.mage.cookies.get("form_key")}),C.default.post("checkout/sidebar/updateItemQty/",e,!0,"application/x-www-form-urlencoded").done(function(e){e.success&&0<o&&t.val(o)}).fail(function(e){console.error(JSON.stringify(e))})};document.addEventListener("touchmove",function(e){y(".website").removeClass("open")},!1),y.fn.printArea=function(e){var t="printArea_";y.extend(s,{mode:a,standard:r,popHt:500,popWd:400,popX:200,popY:200,popTitle:"",popClose:!1,extraCss:"",extraHead:"",retainAttr:["id","class","style"]},e),i++,y("[id^="+t+"]").remove(),s.id=t+i;var o=y(this),n=m.getPrintWindow();m.write(n.doc,o),setTimeout(function(){m.print(n)},1e3)};var m={print:function(e){var t=e.win;y(e.doc).ready(function(){t.focus(),t.print(),s.mode==o&&s.popClose&&setTimeout(function(){t.close()},2e3)})},write:function(e,t){e.open(),e.write(m.docType()+"<html>"+m.getHead()+m.getBody(t)+"</html>"),e.close()},docType:function(){return s.mode==a?"":s.standard==r?"<!DOCTYPE html>":'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01'+(s.standard==e?" Transitional":"")+'//EN" "http://www.w3.org/TR/html4/'+(s.standard==e?"loose":"strict")+'.dtd">'},getHead:function(){var t="",o="";return s.extraHead&&s.extraHead.replace(/([^,]+)/g,function(e){t+=e}),y(document).find("link").filter(function(){var e=y(this).attr("rel");return"undefined"===y.type(e)==0&&"stylesheet"==e.toLowerCase()}).filter(function(){var e=y(this).attr("media");return"undefined"===y.type(e)||""==e||"print"==e.toLowerCase()||"all"==e.toLowerCase()}).each(function(){o+='<link type="text/css" rel="stylesheet" href="'+y(this).attr("href")+'" >'}),s.extraCss&&s.extraCss.replace(/([^,\s]+)/g,function(e){o+='<link type="text/css" rel="stylesheet" href="'+e+'">'}),"<head><title>"+s.popTitle+"</title>"+t+o+"</head>"},getBody:function(e){var i="",a=s.retainAttr;return e.each(function(){for(var e=m.getFormData(y(this)),t="",o=0;o<a.length;o++){var n=y(e).attr(a[o]);n&&(t+=(0<t.length?" ":"")+a[o]+"='"+n+"'")}i+="<div "+t+">"+y(e).html()+"</div>"}),"<body>"+i+"</body>"},getFormData:function(e){var t=e.clone(),n=y("input,select,textarea",t);return y("input,select,textarea",e).each(function(e){var t=y(this).attr("type");"undefined"===y.type(t)&&(t=y(this).is("select")?"select":y(this).is("textarea")?"textarea":"");var o=n.eq(e);"radio"==t||"checkbox"==t?o.attr("checked",y(this).is(":checked")):"text"==t||""==t?o.attr("value",y(this).val()):"select"==t?y(this).find("option").each(function(e){y(this).is(":selected")&&y("option",o).eq(e).attr("selected",!0)}):"textarea"==t&&o.text(y(this).val())}),t},getPrintWindow:function(){switch(s.mode){case a:var e=new m.iframe;return{win:e.contentWindow||e,doc:e.doc};case o:var t=new m.popup;return{win:t,doc:t.doc}}},iframe:function(){var e=s.id,t=void 0;try{t=document.createElement("iframe"),document.body.appendChild(t),y(t).attr({style:"border:0;position:absolute;width:0px;height:0px;right:0px;top:0px;",id:e,src:"#"+(new Date).getTime()}),t.doc=null,t.doc=t.contentDocument?t.contentDocument:t.contentWindow?t.contentWindow.document:t.document}catch(e){throw e+". iframes may not be supported in this browser."}if(null==t.doc)throw"Cannot find document.";return t},popup:function(){var e="location=yes,statusbar=no,directories=no,menubar=no,titlebar=no,toolbar=no,dependent=no";e+=",width="+s.popWd+",height="+s.popHt,e+=",resizable=yes,screenX="+s.popX+",screenY="+s.popY+",personalbar=no,scrollbars=yes";var t=window.open("","_blank",e);return t.doc=t.document,t}},g={debug:!1,_log:function(e){},init:function(){var e={item:l.item,container:l.container,next:l.next,pagination:l.pagination,parameter:l.parameter,delay:600,negativeMargin:l.negativeMargin,history:{prev:".prev"},noneleft:{text:l.noneText,html:'<div class="ias-noneleft">{text}</div>'},spinner:{src:l.loaderSrc,html:'<div class="ias-spinner"><img src="{src}"/>'+l.loaderHtml+"</div>"},trigger:{text:l.triggerText,html:'<div class="ias-trigger ias-trigger-next"><a>{text}</a></div>',textPrev:l.textPrev,htmlPrev:'<div class="ias-trigger ias-trigger-prev"><a>{text}</a></div>',offset:l.offset}};window.ias_config&&y.extend(e,window.ias_config),g._log({extension:"ias",config:e}),window.ias=y.ias(e),g._log({extension:"paging"}),window.ias.extension(new IASPagingExtension),g._log({extension:"spinner"}),window.ias.extension(new IASSpinnerExtension(e.spinner)),g._log({extension:"noneleft"}),window.ias.extension(new IASNoneLeftExtension(e.noneleft)),g._log({extension:"trigger"}),window.ias.extension(new IASTriggerExtension(e.trigger)),window.ias.on("scroll",function(e,t){g._log({eventName:"scroll",scrollOffset:e,scrollThreshold:t})}),window.ias.on("load",function(e){g._log({eventName:"load",event:e})}),window.ias.on("loaded",function(e,t){g._log({eventName:"loaded",data:e,items:t})}),window.ias.on("render",function(e){g._log({eventName:"render",items:e}),y(e).find(".lazy").lazyload({offset:t.offset,offsetVertical:t.offsetVertical,offsetHorizontal:t.offsetHorizontal,offsetTop:t.offsetTop,offsetBottom:t.offsetBottom,offsetLeft:t.offsetLeft,offsetRight:t.offsetRight,throttle:t.throttle,effec:t.effect,debounce:t.debounce,unload:t.unload,delay:t.delay,callback:function(e,t){y(e).removeClass("lazy").addClass("loaded")}})}),window.ias.on("noneLeft",function(){g._log({eventName:"noneLeft"})}),window.ias.on("next",function(e){g._log({eventName:"next",url:e})}),window.ias.on("ready",function(){g._log({eventName:"ready"})})}};void 0!==l&&g.init(),y.fn.simulateSelect=function(i){i=y.extend({event:"click",target:"#sorter"},i);var a=y(this);a.on(i.event,function(e){var t=y(e.currentTarget);t.hasClass("on")?(t.removeClass("on"),a.find(i.container).slideUp("fast")):(t.addClass("on"),a.find(i.container).slideDown("fast"))}),a.on(i.event,i.container+"> li",function(e){e.stopPropagation();var t=y(e.currentTarget).find("p"),o=t.text(),n=t.attr("key");a.find(i.link).text(o),a.find(i.container).hide(),y(i.target).find('option[value="'+n+'"]').attr("selected",!0),y(i.target).trigger("change")})},y.fly=function(e,t){var d={autoPlay:!0,vertex_Rtop:20,speed:1.2,start:{},end:{},onEnd:y.noop},o=this,f=y(e);o.init=function(e){this.setOptions(e),this.settings.autoPlay&&this.play()},o.setOptions=function(e){this.settings=y.extend(!0,{},d,e);var t=this.settings,o=t.start,n=t.end;f.css({marginTop:"0px",marginLeft:"0px",position:"fixed"}).appendTo("body"),null!=n.width&&null!=n.height&&y.extend(!0,o,{width:f.width(),height:f.height()});var i=Math.min(o.top,n.top)-Math.abs(o.left-n.left)/3;i<t.vertex_Rtop&&(i=Math.min(t.vertex_Rtop,Math.min(o.top,n.top)));var a=Math.sqrt(Math.pow(o.top-n.top,2)+Math.pow(o.left-n.left,2)),s=Math.ceil(Math.min(Math.max(Math.log(a)/.05-75,30),100)/t.speed),r=o.top==i?0:-Math.sqrt((n.top-i)/(o.top-i)),l=(r*o.left-n.left)/(r-1),c=n.left==l?0:(n.top-i)/Math.pow(n.left-l,2);y.extend(!0,t,{count:-1,steps:s,vertex_left:l,vertex_top:i,curvature:c})},o.play=function(){this.move()},o.move=function(){var e=this.settings,t=e.start,o=e.count,n=e.steps,i=e.end,a=t.left+(i.left-t.left)*o/n,s=0==e.curvature?t.top+(i.top-t.top)*o/n:e.curvature*Math.pow(a-e.vertex_left,2)+e.vertex_top;if(null!=i.width&&null!=i.height){var r=n/2,l=i.width-(i.width-t.width)*Math.cos(o<r?0:(o-r)/(n-r)*Math.PI/2),c=i.height-(i.height-t.height)*Math.cos(o<r?0:(o-r)/(n-r)*Math.PI/2);f.css({width:l+"px",height:c+"px","font-size":Math.min(l,c)+"px"})}f.css({left:a+"px",top:s+"px"}),e.count++;var d=window.requestAnimationFrame(y.proxy(this.move,this));o==n&&(window.cancelAnimationFrame(d),e.onEnd.apply(this))},o.destroy=function(){f.remove()},o.init(t)},y.fn.fly=function(e){return this.each(function(){null==y(this).data("fly")&&y(this).data("fly",new y.fly(this,e))})},y(".link-faq").on("click",function(e){var t=y(e.currentTarget).parent();t.hasClass("open")?(t.find(".menu").slideUp("slow"),t.removeClass("open")):(t.find(".menu").slideDown("slow"),t.addClass("open"))}),y(".open-filter").on("click",function(e){var t=y(e.currentTarget);t.parent().hasClass("slide")?t.parent().removeClass("slide"):t.parent().addClass("slide")}),y(".sorter-filter").on("click",function(e){var t=y(".sidebar");t.hasClass("slide")?t.removeClass("slide"):t.addClass("slide")}),y(".close-filter").on("click",function(e){y(".sidebar").removeClass("slide")}),y(".myboard-link").on("click",function(e){var t=y(e.currentTarget).parent();t.hasClass("board-collapse")?t.removeClass("board-collapse"):t.addClass("board-collapse")}),y(".footer-links").on("click",".item",function(e){var t=y(e.currentTarget);t.hasClass("open")?t.removeClass("open"):t.addClass("open")}),y(".drop").on("click",function(e){var t=y(e.currentTarget).parent().parent();t.hasClass("on")?t.removeClass("on"):t.addClass("on")}),y(".values").on("click",".lb",function(e){var t=y(e.currentTarget).parent();t.hasClass("on")?t.removeClass("on"):t.addClass("on")}),y(".show-all").on("click",function(e){y(e.currentTarget).parent().addClass("open")}),y(".btn-quick").on("click",".cart",function(e){y("body").addClass("overflow")}),y(".btn-quick").on("click",".checkout",function(e){var t=y(".quick-add form");y('<input type="hidden" name="checkout" value="1" />').appendTo(t),y("body").addClass("overflow")}),y(".btn-group").on("click",".cancel",function(e){y(e.currentTarget).closest("form").find("input[name=checkout]").remove(),y("body").removeClass("overflow")}),y(".action.pop").on("click",function(e){var t=y(".quick-add");t.hasClass("close")?(y(e.currentTarget).removeClass("cl"),t.slideDown().removeClass("close")):(y(e.currentTarget).addClass("cl"),t.slideUp().addClass("close"))}),y(".sorter-simulate").simulateSelect({link:"cite",container:".sorter-layer"}),y(".action.tocheckout").on("click",function(e){var t=y(e.currentTarget).closest("form");y('<input type="hidden" name="checkout" value="1" />').appendTo(t),t.addClass("checkout").submit()}),y(".read-more").on("mouseenter",function(e){y(e.currentTarget).next().addClass("show")}).on("mouseleave",function(e){y(e.currentTarget).next().removeClass("show")});var v=function(){var n=window.innerWidth,e=y(".banner-img");y.each(e,function(e,t){var o=null;o=n<=767?y(t).data("mobile"):767<n&&n<=1024?y(t).data("pad"):y(t).data("pc"),y(t).attr("src",o)})};if(v(),y(window).on("resize",function(){v()}),void 0!==window.__lc){var w=document.createElement("script"),x=document.getElementsByTagName("head")[0];w.async=!0,w.src=window.__lc.url,x.parentNode.insertBefore(w,x)}if("1"==c.enabled){"serviceWorker"in navigator&&navigator.serviceWorker.register(c.baseUrl+"serviceWorker.js").then(function(e){console.log("ServiceWorker registration successful with scope: ",e.scope)},function(e){console.log("ServiceWorker registration failed: ",e)}),navigator.serviceWorker&&navigator.serviceWorker.ready.then(function(n){window.addEventListener("beforeinstallprompt",function(e){e.userChoice.then(function(e){console.log(e.outcome),"dismissed"===e.outcome?console.log("User cancelled home screen install"):console.log("User added to home screen")})}),firebase.messaging().useServiceWorker(n),firebase.messaging().requestPermission().then(function(){console.log("Notification permission granted."),firebase.messaging().getToken().then(function(e){if(e){var t="https://iid.googleapis.com/iid/v1/"+e;y.ajax({url:c.ajaxUrl,type:"POST",dataType:"json",data:{subUrl:t},success:function(e){console.log(e)},error:function(){console.log("Cannot get data")}})}else console.log("No Instance ID token available. Request permission to generate one.")}).catch(function(e){console.log("An error occurred while retrieving token. ",e)})}).catch(function(e){console.log("Unable to get permission to notify.",e)}),firebase.messaging().onMessage(function(e){if(console.log("Message received. "),e.notification){var t=e.notification.title,o={body:e.notification.body,icon:e.notification.icon,badge:e.notification.icon};n.showNotification(t,o)}})})}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
